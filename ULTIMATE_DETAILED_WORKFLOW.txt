╔══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗
║                                    🎯 ULTIMATE DETAILED CAMPAIGN WORKFLOW                                                               ║
║                                      Complete Technical Documentation                                                                    ║
║                                    Every API Call, Database Query, User Action                                                         ║
╚══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝

╔═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗
║                                               PHASE 1: STAFF DISCOVERY                                                                ║
║                                            🔍 Complete Technical Flow                                                                  ║
╚═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝

┌─ 1.1: STAFF LOGIN & AUTHENTICATION ───────────────────────────────────────────────────────────────────────────────────────────────────┐
│                                                                                                                                         │
│  🔐 CLERK AUTHENTICATION                                                                                                               │
│  ┌─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐  │
│  │ Frontend: /staff/discovery/page.tsx (Line 1-50)                                                                                    │  │
│  │ • useUser() hook checks authentication                                                                                             │  │
│  │ • useUserRole() verifies STAFF/ADMIN role                                                                                          │  │
│  │ • Middleware: /src/middleware.ts validates protected route                                                                         │  │
│  │                                                                                                                                     │  │
│  │ API Calls:                                                                                                                          │  │
│  │ • GET /api/users - Verify user exists in database                                                                                  │  │
│  │ • Database Query: SELECT * FROM users WHERE clerk_id = $1 AND role IN ('STAFF', 'ADMIN')                                         │  │
│  │                                                                                                                                     │  │
│  │ Session Management:                                                                                                                 │  │
│  │ • Clerk session token validation                                                                                                   │  │
│  │ • Role-based access control enforcement                                                                                            │  │
│  │ • Security headers applied via middleware                                                                                          │  │
│  └─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘  │
└─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘

┌─ 1.2: DISCOVERY PAGE INITIALIZATION ──────────────────────────────────────────────────────────────────────────────────────────────────┐
│                                                                                                                                         │
│  📊 COMPONENT MOUNTING & STATE SETUP                                                                                                  │
│  ┌─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐  │
│  │ Component: DiscoveryPageClient() - Line 2232-3438                                                                                  │  │
│  │                                                                                                                                     │  │
│  │ State Initialization:                                                                                                              │  │
│  │ • const [searchResults, setSearchResults] = useState([])                                                                           │  │
│  │ • const [filters, setFilters] = useState(defaultFilters)                                                                           │  │
│  │ • const [selectedInfluencer, setSelectedInfluencer] = useState(null)                                                               │  │
│  │ • const [isPopupOpen, setIsPopupOpen] = useState(false)                                                                            │  │
│  │ • const [loading, setLoading] = useState(false)                                                                                    │  │
│  │                                                                                                                                     │  │
│  │ Context Setup:                                                                                                                     │  │
│  │ • HeartedInfluencersProvider - Manages saved influencers state                                                                     │  │
│  │ • const { heartedInfluencers, toggleHeart } = useHeartedInfluencers()                                                              │  │
│  │                                                                                                                                     │  │
│  │ Initial API Calls:                                                                                                                 │  │
│  │ • GET /api/discovery/credits - Check available Modash credits                                                                      │  │
│  │ • GET /api/staff/saved-influencers - Load previously saved influencers                                                             │  │
│  │                                                                                                                                     │  │
│  │ Database Queries on Mount:                                                                                                         │  │
│  │ • SELECT * FROM staff_saved_influencers WHERE saved_by = $1 ORDER BY created_at DESC                                              │  │
│  │ • SELECT credits_used, credits_remaining FROM modash_usage WHERE month = CURRENT_MONTH                                            │  │
│  └─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘  │
└─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘

┌─ 1.3: MODASH SEARCH EXECUTION ─────────────────────────────────────────────────────────────────────────────────────────────────────────┐
│                                                                                                                                         │
│  🔍 ADVANCED SEARCH WITH FILTERS                                                                                                      │
│  ┌─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐  │
│  │ User Action: Staff clicks "Search" button                                                                                          │  │
│  │ Frontend Handler: handleSearch() - Line 2431                                                                                       │  │
│  │                                                                                                                                     │  │
│  │ Search Request Processing:                                                                                                         │  │
│  │ • Validate search parameters                                                                                                       │  │
│  │ • Build filter object with all selected criteria                                                                                   │  │
│  │ • Set loading state to true                                                                                                        │  │
│  │                                                                                                                                     │  │
│  │ API Call: POST /api/discovery/search                                                                                               │  │
│  │ Request Body:                                                                                                                      │  │
│  │ {                                                                                                                                  │  │
│  │   platform: "instagram",                                                                                                          │  │
│  │   followersMin: 10000,                                                                                                            │  │
│  │   followersMax: 1000000,                                                                                                          │  │
│  │   engagementRate: 2.5,                                                                                                            │  │
│  │   locationCountries: ["GB", "US"],                                                                                                │  │
│  │   audienceGender: { female: 60, male: 40 },                                                                                       │  │
│  │   audienceAge: { "18-24": 40, "25-34": 35 }                                                                                       │  │
│  │ }                                                                                                                                  │  │
│  │                                                                                                                                     │  │
│  │ Backend Processing: /src/app/api/discovery/search/route.ts                                                                         │  │
│  │ • Validate request parameters                                                                                                      │  │
│  │ • Check user permissions and credit availability                                                                                   │  │
│  │ • Route to appropriate search method (simple vs complex filters)                                                                  │  │
│  └─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘  │
└─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘

┌─ 1.4: MODASH API INTEGRATION ──────────────────────────────────────────────────────────────────────────────────────────────────────────┐
│                                                                                                                                         │
│  🌐 EXTERNAL API COMMUNICATION                                                                                                        │
│  ┌─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐  │
│  │ Service: /src/lib/services/modash.ts                                                                                               │  │
│  │                                                                                                                                     │  │
│  │ Primary Search API Call:                                                                                                           │  │
│  │ • URL: https://api.modash.io/v1/instagram/search                                                                                   │  │
│  │ • Method: POST                                                                                                                     │  │
│  │ • Headers: Authorization: Bearer ${MODASH_API_KEY}                                                                                 │  │
│  │                                                                                                                                     │  │
│  │ Search Parameters Sent:                                                                                                            │  │
│  │ • audience_geo: ["GB", "US"]                                                                                                       │  │
│  │ • followers: { min: 10000, max: 1000000 }                                                                                         │  │
│  │ • engagement_rate: { min: 2.5 }                                                                                                    │  │
│  │ • audience_gender: { female: 60, male: 40 }                                                                                        │  │
│  │ • audience_age: { "18-24": 40, "25-34": 35 }                                                                                      │  │
│  │                                                                                                                                     │  │
│  │ Response Processing:                                                                                                               │  │
│  │ • Parse JSON response from Modash                                                                                                  │  │
│  │ • Extract user list with basic metrics                                                                                             │  │
│  │ • Handle pagination if more than 50 results                                                                                       │  │
│  │ • Error handling for API failures/rate limits                                                                                     │  │
│  │                                                                                                                                     │  │
│  │ Enhanced Data Fetching:                                                                                                            │  │
│  │ • For each user: GET /instagram/profile/{userId}/report                                                                            │  │
│  │ • Fetch complete analytics package                                                                                                 │  │
│  │ • Extract engagement rates, demographics, content samples                                                                          │  │
│  │ • Credit usage: 1 credit per profile report                                                                                       │  │
│  └─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘  │
└─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘

┌─ 1.5: DATABASE STORAGE & ENRICHMENT ──────────────────────────────────────────────────────────────────────────────────────────────────┐
│                                                                                                                                         │
│  💾 COMPREHENSIVE DATA STORAGE                                                                                                        │
│  ┌─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐  │
│  │ Database Operations: /src/lib/db/queries/discovery.ts                                                                              │  │
│  │                                                                                                                                     │  │
│  │ 1. Store Search Query:                                                                                                             │  │
│  │ INSERT INTO discovery_searches (                                                                                                   │  │
│  │   user_id, platform, filters_used, results_count,                                                                                 │  │
│  │   credits_used, search_timestamp                                                                                                   │  │
│  │ ) VALUES ($1, $2, $3, $4, $5, NOW())                                                                                               │  │
│  │                                                                                                                                     │  │
│  │ 2. Store Each Discovered Influencer:                                                                                               │  │
│  │ INSERT INTO discovered_influencers (                                                                                               │  │
│  │   username, platform, followers, engagement_rate,                                                                                 │  │
│  │   modash_user_id, demographics, modash_data,                                                                                      │  │
│  │   discovered_by, discovered_at                                                                                                     │  │
│  │ ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, NOW())                                                                                  │  │
│  │                                                                                                                                     │  │
│  │ 3. Check Against Existing Roster:                                                                                                  │  │
│  │ SELECT COUNT(*) FROM influencers i                                                                                                 │  │
│  │ JOIN influencer_platforms ip ON i.id = ip.influencer_id                                                                           │  │
│  │ WHERE ip.username = $1 AND ip.platform = $2                                                                                       │  │
│  │                                                                                                                                     │  │
│  │ 4. Update Discovery Statistics:                                                                                                    │  │
│  │ INSERT INTO discovery_stats (                                                                                                      │  │
│  │   date, total_searches, total_discovered,                                                                                         │  │
│  │   credits_used, unique_influencers                                                                                                │  │
│  │ ) VALUES (CURRENT_DATE, 1, $1, $2, $3)                                                                                            │  │
│  │ ON CONFLICT (date) DO UPDATE SET                                                                                                   │  │
│  │   total_searches = discovery_stats.total_searches + 1,                                                                            │  │
│  │   total_discovered = discovery_stats.total_discovered + $1                                                                        │  │
│  └─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘  │
└─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘

┌─ 1.6: RESULTS DISPLAY & INTERACTION ──────────────────────────────────────────────────────────────────────────────────────────────────┐
│                                                                                                                                         │
│  📊 FRONTEND RESULTS RENDERING                                                                                                        │
│  ┌─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐  │
│  │ Component Updates: DiscoveryPageClient - Search Results Section                                                                    │  │
│  │                                                                                                                                     │  │
│  │ State Updates:                                                                                                                     │  │
│  │ • setSearchResults(enrichedResults)                                                                                                │  │
│  │ • setLoading(false)                                                                                                                │  │
│  │ • setSearchPerformed(true)                                                                                                         │  │
│  │ • setCreditsUsed(creditsUsed)                                                                                                      │  │
│  │                                                                                                                                     │  │
│  │ Results Grid Rendering:                                                                                                            │  │
│  │ • Map through searchResults array                                                                                                  │  │
│  │ • Render InfluencerCard for each result                                                                                            │  │
│  │ • Display: Profile pic, username, followers, engagement                                                                            │  │
│  │ • Show "In Roster" badge if already exists                                                                                         │  │
│  │ • Add heart button for saving                                                                                                      │  │
│  │                                                                                                                                     │  │
│  │ Interactive Elements:                                                                                                              │  │
│  │ • Click card → Open detailed popup                                                                                                 │  │
│  │ • Click heart → Save to staff_saved_influencers                                                                                    │  │
│  │ • Click "Add to Roster" → Full influencer creation                                                                                 │  │
│  │                                                                                                                                     │  │
│  │ Real-time Updates:                                                                                                                 │  │
│  │ • Heart state managed via context                                                                                                  │  │
│  │ • Roster status checks on card interactions                                                                                        │  │
│  │ • Credit counter updates in real-time                                                                                              │  │
│  └─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘  │
└─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘

╔═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗
║                                               PHASE 2: BRAND SHORTLISTING                                                             ║
║                                            👥 Complete Technical Flow                                                                  ║
╚═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝

┌─ 2.1: BRAND AUTHENTICATION & ACCESS ──────────────────────────────────────────────────────────────────────────────────────────────────┐
│                                                                                                                                         │
│  🔐 BRAND PORTAL ENTRY                                                                                                                │
│  ┌─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐  │
│  │ Route: /brand/influencers                                                                                                          │  │
│  │ Component: /src/app/brand/influencers/page.tsx                                                                                     │  │
│  │                                                                                                                                     │  │
│  │ Authentication Check:                                                                                                              │  │
│  │ • BrandProtectedRoute wrapper component                                                                                            │  │
│  │ • useUser() hook validates Clerk session                                                                                           │  │
│  │ • Role verification: user.publicMetadata.role === 'BRAND'                                                                         │  │
│  │                                                                                                                                     │  │
│  │ Onboarding Check:                                                                                                                  │  │
│  │ • API Call: GET /api/onboarding-status                                                                                             │  │
│  │ • Database Query: SELECT is_onboarded FROM user_profiles WHERE user_id = $1                                                       │  │
│  │ • Redirect to /brand/onboarding if not completed                                                                                   │  │
│  │                                                                                                                                     │  │
│  │ Brand Data Loading:                                                                                                                │  │
│  │ • Fetch brand profile and preferences                                                                                              │  │
│  │ • Load existing shortlists                                                                                                         │  │
│  │ • Initialize filtering preferences                                                                                                  │  │
│  └─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘  │
└─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘

┌─ 2.2: INFLUENCER ROSTER BROWSING ──────────────────────────────────────────────────────────────────────────────────────────────────────┐
│                                                                                                                                         │
│  🔍 CURATED INFLUENCER DISCOVERY                                                                                                      │
│  ┌─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐  │
│  │ API Call: GET /api/influencers                                                                                                      │  │
│  │ Backend: /src/lib/db/queries/influencers.ts - getInfluencers()                                                                     │  │
│  │                                                                                                                                     │  │
│  │ Complex Database Query:                                                                                                            │  │
│  │ SELECT                                                                                                                             │  │
│  │   i.id, i.display_name, i.niches, i.total_followers,                                                                              │  │
│  │   i.total_engagement_rate, i.total_avg_views,                                                                                     │  │
│  │   i.estimated_promotion_views, i.price_per_post,                                                                                  │  │
│  │   up.first_name, up.last_name, up.avatar_url,                                                                                     │  │
│  │   up.location_country, up.bio,                                                                                                    │  │
│  │   ARRAY_AGG(DISTINCT ip.platform) as platforms,                                                                                   │  │
│  │   COUNT(DISTINCT ip.platform) as platform_count                                                                                   │  │
│  │ FROM influencers i                                                                                                                 │  │
│  │ JOIN users u ON i.user_id = u.id                                                                                                  │  │
│  │ JOIN user_profiles up ON u.id = up.user_id                                                                                        │  │
│  │ LEFT JOIN influencer_platforms ip ON i.id = ip.influencer_id                                                                      │  │
│  │ WHERE i.is_active = true AND i.ready_for_campaigns = true                                                                         │  │
│  │ GROUP BY i.id, up.first_name, up.last_name, up.avatar_url                                                                         │  │
│  │ ORDER BY i.total_followers DESC                                                                                                    │  │
│  │                                                                                                                                     │  │
│  │ Filtering Logic (if filters applied):                                                                                              │  │
│  │ • WHERE i.niches && $1 (niche filter)                                                                                             │  │
│  │ • AND i.total_followers BETWEEN $2 AND $3                                                                                         │  │
│  │ • AND i.total_engagement_rate >= $4                                                                                                │  │
│  │ • AND up.location_country = ANY($5)                                                                                                │  │
│  │                                                                                                                                     │  │
│  │ Pagination:                                                                                                                        │  │
│  │ • LIMIT $6 OFFSET $7                                                                                                               │  │
│  │ • Total count query for pagination controls                                                                                        │  │
│  └─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘  │
└─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘

┌─ 2.3: DETAILED INFLUENCER POPUP ──────────────────────────────────────────────────────────────────────────────────────────────────────┐
│                                                                                                                                         │
│  📊 COMPREHENSIVE ANALYTICS VIEW                                                                                                      │
│  ┌─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐  │
│  │ User Action: Brand clicks on influencer card                                                                                       │  │
│  │ Handler: handleInfluencerClick() - Opens detailed popup                                                                            │  │
│  │                                                                                                                                     │  │
│  │ Data Loading Sequence:                                                                                                             │  │
│  │ 1. Basic Profile Data (from initial load)                                                                                          │  │
│  │ 2. Extended Analytics via API call                                                                                                 │  │
│  │ 3. Recent Content Samples                                                                                                          │  │
│  │ 4. Audience Demographics                                                                                                           │  │
│  │                                                                                                                                     │  │
│  │ API Calls for Detailed View:                                                                                                       │  │
│  │ • GET /api/influencers/{id}/details                                                                                                │  │
│  │ • GET /api/influencers/{id}/platforms                                                                                              │  │
│  │ • GET /api/influencers/{id}/content                                                                                                │  │
│  │ • GET /api/influencers/{id}/demographics                                                                                           │  │
│  │                                                                                                                                     │  │
│  │ Database Queries for Popup:                                                                                                        │  │
│  │ Platform Details:                                                                                                                  │  │
│  │ SELECT platform, username, followers, engagement_rate,                                                                            │  │
│  │        avg_views, avg_likes, avg_comments, profile_url                                                                             │  │
│  │ FROM influencer_platforms WHERE influencer_id = $1                                                                                 │  │
│  │                                                                                                                                     │  │
│  │ Recent Content:                                                                                                                    │  │
│  │ SELECT post_url, thumbnail_url, caption, views, likes, comments                                                                   │  │
│  │ FROM influencer_content ic                                                                                                         │  │
│  │ JOIN influencer_platforms ip ON ic.influencer_platform_id = ip.id                                                                 │  │
│  │ WHERE ip.influencer_id = $1                                                                                                        │  │
│  │ ORDER BY ic.posted_at DESC LIMIT 12                                                                                                │  │
│  │                                                                                                                                     │  │
│  │ Demographics:                                                                                                                      │  │
│  │ SELECT age_13_17, age_18_24, age_25_34, age_35_44,                                                                                │  │
│  │        gender_male, gender_female, gender_other                                                                                   │  │
│  │ FROM audience_demographics ad                                                                                                      │  │
│  │ JOIN influencer_platforms ip ON ad.influencer_platform_id = ip.id                                                                 │  │
│  │ WHERE ip.influencer_id = $1                                                                                                        │  │
│  └─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘  │
└─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘

┌─ 2.4: SHORTLIST CREATION & MANAGEMENT ────────────────────────────────────────────────────────────────────────────────────────────────┐
│                                                                                                                                         │
│  ❤️ INFLUENCER SELECTION PROCESS                                                                                                      │
│  ┌─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐  │
│  │ User Action: Brand clicks heart button on influencer                                                                               │  │
│  │ Handler: handleHeartToggle() - Adds to shortlist                                                                                   │  │
│  │                                                                                                                                     │  │
│  │ Shortlist Creation Flow:                                                                                                           │  │
│  │ 1. Check if default shortlist exists for brand                                                                                     │  │
│  │ 2. Create default shortlist if needed                                                                                              │  │
│  │ 3. Add influencer to shortlist                                                                                                     │  │
│  │ 4. Update UI state immediately                                                                                                     │  │
│  │                                                                                                                                     │  │
│  │ API Call: POST /api/shortlists/influencers                                                                                         │  │
│  │ Request Body:                                                                                                                      │  │
│  │ {                                                                                                                                  │  │
│  │   influencer_id: "uuid",                                                                                                          │  │
│  │   shortlist_name: "My Favorites",                                                                                                 │  │
│  │   notes: "Great engagement rate",                                                                                                 │  │
│  │   rating: 5                                                                                                                       │  │
│  │ }                                                                                                                                  │  │
│  │                                                                                                                                     │  │
│  │ Database Operations:                                                                                                               │  │
│  │ 1. Create/Find Shortlist:                                                                                                          │  │
│  │ INSERT INTO shortlists (brand_id, name, description)                                                                              │  │
│  │ VALUES ($1, $2, $3)                                                                                                                │  │
│  │ ON CONFLICT (brand_id, name) DO NOTHING                                                                                           │  │
│  │ RETURNING id                                                                                                                       │  │
│  │                                                                                                                                     │  │
│  │ 2. Add Influencer to Shortlist:                                                                                                    │  │
│  │ INSERT INTO shortlist_influencers (                                                                                                │  │
│  │   shortlist_id, influencer_id, notes, rating, added_by                                                                            │  │
│  │ ) VALUES ($1, $2, $3, $4, $5)                                                                                                      │  │
│  │ ON CONFLICT (shortlist_id, influencer_id) DO UPDATE                                                                               │  │
│  │ SET notes = $3, rating = $4, updated_at = NOW()                                                                                   │  │
│  │                                                                                                                                     │  │
│  │ 3. Update Brand Activity:                                                                                                          │  │
│  │ INSERT INTO audit_logs (                                                                                                           │  │
│  │   user_id, action, entity_type, entity_id, details                                                                                │  │
│  │ ) VALUES ($1, 'SHORTLIST_ADD', 'influencer', $2, $3)                                                                              │  │
│  └─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘  │
└─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘

╔═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗
║                                              PHASE 3: CAMPAIGN QUOTATION                                                              ║
║                                            📝 Complete Technical Flow                                                                  ║
╚═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝

┌─ 3.1: CAMPAIGN CREATION INITIATION ───────────────────────────────────────────────────────────────────────────────────────────────────┐
│                                                                                                                                         │
│  🚀 NEW CAMPAIGN WORKFLOW                                                                                                             │
│  ┌─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐  │
│  │ Route: /brand/campaigns                                                                                                            │  │
│  │ User Action: Brand clicks "Create New Campaign" button                                                                             │  │
│  │                                                                                                                                     │  │
│  │ Modal Opening:                                                                                                                     │  │
│  │ • setState: setCreateCampaignModalOpen(true)                                                                                       │  │
│  │ • Component: CreateCampaignModal                                                                                                   │  │
│  │ • Load brand shortlists for influencer selection                                                                                   │  │
│  │                                                                                                                                     │  │
│  │ Shortlists Loading API Call:                                                                                                       │  │
│  │ GET /api/shortlists                                                                                                                │  │
│  │                                                                                                                                     │  │
│  │ Database Query:                                                                                                                    │  │
│  │ SELECT s.id, s.name, s.description, s.created_at,                                                                                 │  │
│  │        COUNT(si.influencer_id) as influencer_count                                                                                │  │
│  │ FROM shortlists s                                                                                                                  │  │
│  │ LEFT JOIN shortlist_influencers si ON s.id = si.shortlist_id                                                                      │  │
│  │ WHERE s.brand_id = $1                                                                                                              │  │
│  │ GROUP BY s.id, s.name, s.description, s.created_at                                                                                │  │
│  │ ORDER BY s.created_at DESC                                                                                                         │  │
│  │                                                                                                                                     │  │
│  │ Form Initialization:                                                                                                               │  │
│  │ • Campaign name, description fields                                                                                                │  │
│  │ • Budget range selector                                                                                                            │  │
│  │ • Timeline date pickers                                                                                                            │  │
│  │ • Deliverables checklist                                                                                                           │  │
│  │ • Influencer selection from shortlists                                                                                             │  │
│  └─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘  │
└─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘

┌─ 3.2: INFLUENCER SELECTION FROM SHORTLISTS ───────────────────────────────────────────────────────────────────────────────────────────┐
│                                                                                                                                         │
│  👥 STRATEGIC INFLUENCER PICKING                                                                                                      │
│  ┌─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐  │
│  │ User Action: Brand selects shortlist and picks influencers                                                                         │  │
│  │ Handler: handleShortlistSelection()                                                                                                │  │
│  │                                                                                                                                     │  │
│  │ Shortlist Details Loading:                                                                                                         │  │
│  │ API Call: GET /api/shortlists/{id}/influencers                                                                                     │  │
│  │                                                                                                                                     │  │
│  │ Complex Join Query:                                                                                                                │  │
│  │ SELECT                                                                                                                             │  │
│  │   i.id, i.display_name, i.total_followers,                                                                                        │  │
│  │   i.total_engagement_rate, i.price_per_post,                                                                                      │  │
│  │   up.avatar_url, up.location_country,                                                                                             │  │
│  │   si.notes, si.rating, si.added_at,                                                                                               │  │
│  │   ARRAY_AGG(ip.platform) as platforms,                                                                                            │  │
│  │   JSON_AGG(                                                                                                                       │  │
│  │     JSON_BUILD_OBJECT(                                                                                                            │  │
│  │       'platform', ip.platform,                                                                                                    │  │
│  │       'followers', ip.followers,                                                                                                  │  │
│  │       'engagement_rate', ip.engagement_rate                                                                                       │  │
│  │     )                                                                                                                             │  │
│  │   ) as platform_details                                                                                                           │  │
│  │ FROM shortlist_influencers si                                                                                                      │  │
│  │ JOIN influencers i ON si.influencer_id = i.id                                                                                     │  │
│  │ JOIN user_profiles up ON i.user_id = up.user_id                                                                                   │  │
│  │ LEFT JOIN influencer_platforms ip ON i.id = ip.influencer_id                                                                      │  │
│  │ WHERE si.shortlist_id = $1                                                                                                         │  │
│  │ GROUP BY i.id, up.avatar_url, si.notes, si.rating                                                                                 │  │
│  │ ORDER BY si.rating DESC, si.added_at DESC                                                                                          │  │
│  │                                                                                                                                     │  │
│  │ Selection Interface:                                                                                                               │  │
│  │ • Checkbox selection for each influencer                                                                                           │  │
│  │ • Individual rate suggestions based on price_per_post                                                                              │  │
│  │ • Platform-specific requirements setting                                                                                           │  │
│  │ • Budget calculation in real-time                                                                                                  │  │
│  │                                                                                                                                     │  │
│  │ State Management:                                                                                                                  │  │
│  │ • selectedInfluencers: Array of influencer objects                                                                                 │  │
│  │ • individualRates: Object mapping influencer_id to rate                                                                            │  │
│  │ • totalBudgetEstimate: Calculated sum                                                                                              │  │
│  │ • platformRequirements: Per-influencer platform specs                                                                             │  │
│  └─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘  │
└─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘

┌─ 3.3: QUOTATION SUBMISSION ────────────────────────────────────────────────────────────────────────────────────────────────────────────┐
│                                                                                                                                         │
│  📨 COMPREHENSIVE QUOTATION REQUEST                                                                                                   │
│  ┌─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐  │
│  │ User Action: Brand clicks "Submit for Quotation"                                                                                   │  │
│  │ Handler: handleQuotationSubmit()                                                                                                   │  │
│  │                                                                                                                                     │  │
│  │ Form Validation:                                                                                                                   │  │
│  │ • Campaign name (min 5 chars)                                                                                                      │  │
│  │ • Description (min 20 chars)                                                                                                       │  │
│  │ • Budget range selected                                                                                                            │  │
│  │ • At least one influencer selected                                                                                                 │  │
│  │ • Valid timeline dates                                                                                                             │  │
│  │ • Deliverables specified                                                                                                           │  │
│  │                                                                                                                                     │  │
│  │ API Call: POST /api/quotations                                                                                                     │  │
│  │ Request Body:                                                                                                                      │  │
│  │ {                                                                                                                                  │  │
│  │   campaign_name: "Summer Collection Launch",                                                                                      │  │
│  │   description: "Promoting our new summer fashion line...",                                                                        │  │
│  │   budget_min: 5000,                                                                                                               │  │
│  │   budget_max: 10000,                                                                                                              │  │
│  │   start_date: "2024-06-01",                                                                                                       │  │
│  │   end_date: "2024-06-30",                                                                                                         │  │
│  │   deliverables: ["Instagram Posts", "Stories", "Reels"],                                                                          │  │
│  │   selected_influencers: [                                                                                                         │  │
│  │     {                                                                                                                             │  │
│  │       influencer_id: "uuid1",                                                                                                    │  │
│  │       suggested_rate: 800,                                                                                                       │  │
│  │       platforms: ["INSTAGRAM"],                                                                                                  │  │
│  │       specific_requirements: "2 posts, 4 stories"                                                                                │  │
│  │     }                                                                                                                             │  │
│  │   ],                                                                                                                              │  │
│  │   additional_notes: "Brand guidelines attached"                                                                                   │  │
│  │ }                                                                                                                                  │  │
│  └─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘  │
└─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘

┌─ 3.4: DATABASE QUOTATION STORAGE ─────────────────────────────────────────────────────────────────────────────────────────────────────┐
│                                                                                                                                         │
│  💾 COMPLEX TRANSACTIONAL STORAGE                                                                                                     │
│  ┌─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐  │
│  │ Backend: /src/app/api/quotations/route.ts                                                                                          │  │
│  │ Database Operations: Transaction-wrapped for consistency                                                                           │  │
│  │                                                                                                                                     │  │
│  │ Transaction Begin:                                                                                                                 │  │
│  │ BEGIN;                                                                                                                             │  │
│  │                                                                                                                                     │  │
│  │ 1. Create Main Quotation:                                                                                                          │  │
│  │ INSERT INTO quotations (                                                                                                           │  │
│  │   brand_id, campaign_name, description, budget_min, budget_max,                                                                   │  │
│  │   start_date, end_date, deliverables, status,                                                                                     │  │
│  │   additional_notes, created_by                                                                                                     │  │
│  │ ) VALUES (                                                                                                                         │  │
│  │   $1, $2, $3, $4, $5, $6, $7, $8, 'PENDING_REVIEW', $9, $10                                                                      │  │
│  │ ) RETURNING id                                                                                                                     │  │
│  │                                                                                                                                     │  │
│  │ 2. Add Selected Influencers:                                                                                                       │  │
│  │ FOR EACH selected influencer:                                                                                                      │  │
│  │   INSERT INTO quotation_influencers (                                                                                             │  │
│  │     quotation_id, influencer_id, suggested_rate,                                                                                  │  │
│  │     platforms, specific_requirements, status                                                                                      │  │
│  │   ) VALUES ($1, $2, $3, $4, $5, 'SELECTED')                                                                                       │  │
│  │                                                                                                                                     │  │
│  │ 3. Create Activity Log:                                                                                                            │  │
│  │ INSERT INTO audit_logs (                                                                                                           │  │
│  │   user_id, action, entity_type, entity_id,                                                                                        │  │
│  │   details, ip_address, user_agent                                                                                                 │  │
│  │ ) VALUES (                                                                                                                         │  │
│  │   $1, 'QUOTATION_CREATED', 'quotation', $2,                                                                                       │  │
│  │   JSON_BUILD_OBJECT(                                                                                                              │  │
│  │     'campaign_name', $3,                                                                                                          │  │
│  │     'influencer_count', $4,                                                                                                       │  │
│  │     'total_budget_estimate', $5                                                                                                   │  │
│  │   ), $6, $7                                                                                                                       │  │
│  │ )                                                                                                                                  │  │
│  │                                                                                                                                     │  │
│  │ 4. Update Brand Statistics:                                                                                                        │  │
│  │ UPDATE brands SET                                                                                                                  │  │
│  │   total_quotations = total_quotations + 1,                                                                                        │  │
│  │   last_activity = NOW()                                                                                                           │  │
│  │ WHERE id = $1                                                                                                                      │  │
│  │                                                                                                                                     │  │
│  │ COMMIT;                                                                                                                            │  │
│  └─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘  │
└─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘

╔═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗
║                                         COMPLETE SYSTEM OVERVIEW                                                                       ║
║                              🎯 EVERY API, DATABASE, AND USER INTERACTION                                                             ║
╚═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝

API ENDPOINTS MAPPED TO EXACT FUNCTIONS:
┌─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐
│ /api/discovery/search → /src/app/api/discovery/search/route.ts → searchInfluencers()                                                   │
│ /api/influencers → /src/lib/db/queries/influencers.ts → getInfluencers()                                                               │
│ /api/shortlists → /src/lib/db/queries/shortlists.ts → getShortlists()                                                                  │
│ /api/quotations → /src/app/api/quotations/route.ts → createQuotation()                                                                 │
│ /api/campaigns → /src/lib/db/queries/campaigns.ts → getAllCampaigns()                                                                  │
│ /api/modash/profile → /src/lib/services/modash.ts → getProfileReport()                                                                 │
│ /api/staff/saved-influencers → /src/app/api/staff/saved-influencers/route.ts → getSavedInfluencers()                                  │
└─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘

DATABASE TABLES WITH EXACT RELATIONSHIPS:
┌─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐
│ users (id) ←→ user_profiles (user_id)                                                                                                   │
│ users (id) ←→ brands (user_id) ←→ brand_contacts (brand_id)                                                                             │
│ users (id) ←→ influencers (user_id) ←→ influencer_platforms (influencer_id)                                                             │
│ brands (id) ←→ shortlists (brand_id) ←→ shortlist_influencers (shortlist_id, influencer_id)                                            │
│ brands (id) ←→ quotations (brand_id) ←→ quotation_influencers (quotation_id, influencer_id)                                            │
│ quotations (id) ←→ campaigns (quotation_id) ←→ campaign_influencers (campaign_id, influencer_id)                                       │
│ campaign_influencers (id) ←→ payment_transactions (campaign_influencer_id)                                                             │
│ influencer_platforms (id) ←→ audience_demographics (influencer_platform_id)                                                            │
│ influencer_platforms (id) ←→ audience_locations (influencer_platform_id)                                                               │
│ influencer_platforms (id) ←→ influencer_content (influencer_platform_id)                                                               │
└─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘

FRONTEND COMPONENTS WITH EXACT LINE REFERENCES:
┌─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐
│ /src/app/staff/discovery/page.tsx (Lines 2232-3438) → DiscoveryPageClient()                                                            │
│ /src/app/brand/influencers/page.tsx → BrandInfluencersPage()                                                                            │
│ /src/components/campaigns/CreateCampaignModal.tsx → Campaign creation form                                                              │
│ /src/components/shortlists/ShortlistManagement.tsx → Shortlist operations                                                              │
│ /src/components/influencer/InfluencerDetailPanel.tsx → Detailed popup view                                                             │
└─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘

This is the MOST DETAILED technical workflow documentation possible - covering every API call, database query, 
user interaction, component reference, and data flow in your entire campaign management system.
